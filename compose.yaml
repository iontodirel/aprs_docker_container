# **************************************************************** #
# ham_docker_container - Containers for APRS and ham radio         #
# Version 0.1.0                                                    #
# https://github.com/iontodirel/ham_docker_container               #
# Copyright (c) 2023 Ion Todirel                                   #
# **************************************************************** #
services:
  # ------------------------------------------------------
  # direwolfm - Direwolf modem container
  # ------------------------------------------------------
  # uses configuration based on the .env file
  # the settings here require no changes
  #
  # Exposes typically ports 8010 and 8020 to the host (this can be configured from .env)
  # Has a volume mounted to read the digirig_config.json or other files (this can be configured from .env)
  # A private network is created and exposed between the direwolf container
  # and the aprx container, so that aprx can use port 8020 (typically) 
  # to access the Direwolf TCN KISS TNC
  # This container is given access to the host via --privileged such
  # that we can access USB sound cards and USB serial ports
  #
  # You can create multiple simultanously running containers
  # based on the Direwolf container directory
  # ------------------------------------------------------
  direwolfm:
    env_file:
      - .env
    build: ./direwolf
    image: direwolf
    expose:
      - ${DIREWOLFM_HOST_AGWP_PORT}
      - ${DIREWOLFM_HOST_KISS_PORT}
    ports:
      - "${DIREWOLFM_HOST_AGWP_PORT}:${_DIREWOLF_CONTAINER_AGWP_PORT}"
      - "${DIREWOLFM_HOST_KISS_PORT}:${_DIREWOLF_CONTAINER_KISS_PORT}"
    volumes:
      # find_devices configuration
      - ${DIREWOLFM_HOST_FD_CONFIG}:${_DIREWOLF_CONTAINER_FD_CONFIG}
      # for logging
      - ${DIREWOLFM_HOST_LOG_DIR}:${_DIREWOLF_CONTAINER_LOG_DIR}
      # Direwolf config
      - ${DIREWOLFM_HOST_CONFIG_FILE}:${_DIREWOLF_CONTAINER_CONFIG_FILE}
    networks:
      - direwolf_network
    privileged: true
    restart: always
  # ------------------------------------------------------
  # aprx - repeater container
  # ------------------------------------------------------
  aprx:
    env_file:
      - .env
    build:
      context: ./aprx
      args:
        _APRX_CONTAINER_HEALTH_SCRIPT: ${_APRX_CONTAINER_HEALTH_SCRIPT}
    image: aprx
    ports:
      # These ports are for APRX accessing APRS-IS
      - ${_APRSIS_SERVICE_PORT_A}:${_APRSIS_SERVICE_PORT_A}
      - ${_APRSIS_SERVICE_PORT_B}:${_APRSIS_SERVICE_PORT_B}
    volumes:
      # for access to the aprx.conf file
      - ${APRX_HOST_CONFIG_FILE}:${_APRX_CONTAINER_CONFIG_FILE}
      # for logging
      - ${APRX_HOST_LOG_DIR}:${_APRX_CONTAINER_LOG_DIR}
      # service config
      - ${_APRX_HOST_SVC_CONFIG_FILE}:${_APRX_CONTAINER_SVC_CONF_FILE}
    networks:
      - direwolf_network
      - gps_network
    depends_on:
      - direwolfm
      - gps
    labels:
      - ${AUTOHEAL_ENABLE_RESTART}
    healthcheck:
      test: ["CMD", "${_APRX_CONTAINER_HEALTH_SCRIPT}"]
      interval: 10s # the interval to to perform health check
      start_period: 30s # how long it takes to start the aprx container
                        # health checks won't count until after this period expires
      retries: 1        # how many times to retry until the container becomes unhealty
      timeout: 30s      # how long until the health check completes
    restart: always
  # ------------------------------------------------------
  # gps - gpsd container
  # ------------------------------------------------------
  # exposes port 8888 (typically), can be changed with GPS_HOST_PORT from .env
  # can use "cgps -s localhost:8888" on the host to check (apt-get install gpsd-clients)
  #
  # This container is given access to the host via --privileged such
  # that we can access USB serial ports
  gps:
    env_file:
      - .env
    build:
      context: ./gps
      args:
        _GPS_CONTAINER_HEALTH_SCRIPT: ${_GPS_CONTAINER_HEALTH_SCRIPT}
    image: gps  
    expose:
      - ${GPS_HOST_PORT}
    ports:
      - "${GPS_HOST_PORT}:${_GPS_CONTAINER_PORT}"
    volumes:
      - ${GPS_HOST_FD_CONFIG}:${_GPS_CONTAINER_FD_CONFIG}
      # service config
      - ${_GPS_HOST_SVC_CONFIG_FILE}:${_GPS_CONTAINER_SVC_CONF_FILE}
    networks: 
      - gps_network
    privileged: true
    labels:
      - ${AUTOHEAL_ENABLE_RESTART}
    healthcheck:
      test: ["CMD", "${_GPS_CONTAINER_HEALTH_SCRIPT}"]
      interval: 10s # the interval to to perform health check
      start_period: 10s # how long it takes to start the gps container
                        # health checks won't count until after this period expires
      retries: 1        # how many times to retry until the container becomes unhealty
      timeout: 10s      # how long until the health check completes
    restart: always
  # ------------------------------------------------------
  # autoheal - docker health monitoring container
  # ------------------------------------------------------
  # automatically restarts containers that are in unhealthy state
  # container image from: https://hub.docker.com/r/willfarrell/autoheal
  autoheal:
    env_file:
      - .env
    image: willfarrell/autoheal:latest
    tty: true
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - ${_AUTOHEAL_DOCKER_SOCK}:${_AUTOHEAL_DOCKER_SOCK}
    restart: always
networks:
  direwolf_network:
    driver: bridge
  gps_network:
    driver: bridge

